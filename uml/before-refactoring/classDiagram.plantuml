@startuml ClassDiagram
class Picture {
    - imagePath: String
    - caption: String
    - likesCount: int
    - comments: String[]

    + Picture(imagePath: String, caption: String)
    + addComment(String)
    + like()
    + getImagePath() : String
    + getCaption() : String
    + getLikesCount() : int
    + getComments() : String[]
}

class User {
    + User(username: String, bio: String, password: String)
    + User(username: String)
    + addPicture(Picture)
    + getUsername() : String
    + getBio() : String
    + setBio(String)
    + getPostsCount() : int
    + getFollowersCount() : int
    + getFollowingCount() : int
    + getPictures() : Picture[]
    + setFollowersCount(int)
    + setFollowingCount(int)
    + setPostCount(int)
    + toString() : String

    - username : String
    - bio : bio
    - password : String
    - postsCount : int
    - followersCount : int
    - followingCount : int
    - pictures : Picture[]
}

class UserRelationshipManager {
    - followersFilePath: String = "data/followers.txt" {readOnly}

    + followUser(follower: String, followed: String)
    - isAlreadyFollowing(follower: String, followed: String) : boolean
    + getFollowers(username: String) : String[]
    + getFollowing(username: String) : String[]
}

class ImageLikesManager {
    - likesFilePath: String = "data/likes.txt" {readOnly}
    - likeImage(username: String, imageId: String)
    - readLikes(): Map<String, Set<String>>
    - saveLikes(likesMap: Map<String, Set<String>>)
}

class ExploreUI {
    - WIDTH: int = 300 {readOnly}
    - HEIGHT: int = 500 {readOnly}
    - NAV_ICON_SIZE: int = 20 {readOnly}
    - IMAGE_SIZE: int = WIDTH/3 {readOnly}

    + ExploreUI()
    - initializeUI()
    - createMainContentPanel() : JPanel
    - createHeaderPanel() : JPanel
    - createNavigationPanel() : JPanel
    - displayImage(imagePath: String)
    - createIconButton(iconPath: String, buttonType: String) : JButton

    - ImageUploadUI()
    - openProfileUI()
    - notificationsUI()
    - openHomeUI()
    - exploreUI()
}



class ImageUploadUI {
    - WIDTH: int = 300 {readOnly}
    - HEIGHT: int = 500 {readOnly}
    - NAV_ICON_SIZE: int = 20 {readOnly}

    - imagePreviewLabel: JLabel
    - bioTextArea: JTextArea
    - uploadButton: JButton
    - saveButton: JButton
    - imageUploaded: boolean = false

    + ImageUploadUI()
    - initializeUI()
    - uploadAction(event: ActionEvent)
    - getNextImageId(username: String): int
    - saveImageInfo(imageId: String, username: String, bio: String)
    - getFileExtension(file: File): String
    - createHeaderPanel() : JPanel
    - readUsername: String
    - createNavigationPanel() : JPanel
    - createIconButton(): JButton

    - openProfileUI()
    - notificationsUI()
    - openHomeUI()
    - exploreUI()
}

class InstagramProfileUI {
    - WIDTH: int = 300 {readOnly}
    - HEIGHT: int = 500 {readOnly}
    - PROFILE_IMAGE_SIZE: int = 80 {readOnly}
    - GRID_IMAGE_SIZE: int = WIDTH/3 {readOnly}
    - NAV_ICON_SIZE: int = 20 {readOnly}

    - contentPanel: JPanel
    - headerPanel: JPanel
    - navigationPanel: JPanel
    - currentUser: User


    + InstagramProfileUI(user: User)
    + InstagramProfileUI()
    - initializeUI()
    - createHeaderPanel() : JPanel
    - handleFollowAction(usernameToFollow: String)
    - createNavigationPanel() : JPanel
    - initializeImageGrid()
    - displayImage(imageIcon: ImageIcon)
    - createStatLabel(number: String, text: String)
    - createIconButton(iconPath: String, buttonType: String) : JButton

    - ImageUploadUI()
    - openProfileUI()
    - notificationsUI()
    - openHomeUI()
    - exploreUI()
}

class NotificationsUI {
    - WIDTH: int = 300 {readOnly}
    - HEIGHT: int = 500 {readOnly}
    - NAV_ICON_SIZE: int = 20 {readOnly}

    + NotificationsUI()
    - initializeUI()
    - getElapsedTime(timestamp: String): String
    - createHeaderPanel(): JPanel
    - createNavigationPanel(): JPanel
    - createIconButton(iconPath: String, buttonType: String): JButton

    - ImageUploadUI()
    - openProfileUI()
    - notificationsUI()
    - exploreUI()
}

class QuakstagramHomeUI {
    
    + QuakstagramHomeUI()

    - initializeUI()
    - populateContentPanel(panel: JPanel, sampleData: String[][])
    - handleLikeAction(imageId: String, likesLabel: JLabel)
    - createSampleData(): String[][]
    - createIconButton(iconPath: String): JButton
    - displayImage(postData: String[])
    - refreshDisplayImage(postData: String[], imageId: String)
    - createIconButton(iconPath: String, buttonType: String): JButton

    - openProfileUI()
    - notificationsUI()
    - ImageUploadUI()
    - openHomeUI()
    - exploreUI()
}

class SignInUI {
    - WIDTH: int = 300 {readOnly}
    - HEIGHT: int = 500 {readOnly}

    - txtUsername: JTextField
    - txtPassword: JTextField
    - btnSignIn: JButton
    - btnRegisterNow: JButton
    - lblPhoto: JLabel
    - newUser: User

    + SignInUI()

    - initializeUI()
    - onSignInClicked(event: ActionEvent)
    - onRegisterNowClicked(event: ActionEvent)
    - verifyCredentials(username: String, password: String): boolean
    - saveUserInformation(user: User)
    
    - main(args: String[])
}

class SignUpUI {
    - WIDTH: int = 300 {readOnly}
    - HEIGHT: int = 500 {readOnly}
    - credentialsFilePath: String = "data/credentials.txt" {readOnly}
    - profilePhotoStoragePath: String = "img/storage/profile/" {readOnly}

    - txtUsername: JTextField
    - txtPassword: JTextField
    - txtBio: JTextField
    - btnRegister: JButton
    - lblPhoto: JLabel
    - btnUploadPhoto: JButton
    - btnSignIn: JButton

    + SignUpUI()
    - initializeUI()
    - onRegisterClicked(event: ActionEvent)
    - doesUsernameExist(username: String): boolean
    - handleProfilePictureUpload()
    - saveProfilePicture(file: File, username: String)
    - saveCredentials(username: String, password: String, bio: String),
    
    - openSignInUI()
}


User "1" -- "0..*" Picture : owns >
InstagramProfileUI "1" -- "1" Picture : uses >


SignInUI  ..> User : dependency > 
ExploreUI ..> User : uses locally >
ImageUploadUI ..> User : uses locally >
NotificationsUI ..> User : uses locally >
QuakstagramHomeUI ..> User : uses locally >

SignUpUI ..> Picture : dependency >
@enduml